{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","map","SearchBox","placeholder","handledChange","type","onChange","App","state","searchfield","fetch","then","Response","json","users1","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACtB,6BACCL,EAAMI,QAAQE,WCHNC,G,MAAW,SAAAP,GAAK,OAE1B,qBAAKC,UAAY,YAAjB,SACCD,EAAMI,QAAQI,KAAI,SAAAJ,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCLfI,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OAErB,uBAAOV,UAAY,SAASW,KAAO,SAASF,YAAeA,EAAaG,SAAUF,MC4BvEG,E,kDA3Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXX,QAAS,GACTY,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAAClB,QAAQiB,S,oBAEzC,WAAU,IAAD,SACyBE,KAAKR,MAA9BX,EADA,EACAA,QAASY,EADT,EACSA,YACVQ,EAAkBpB,EAAQqB,QAAO,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASX,EAAYU,kBAClG,OACE,sBAAKzB,UAAU,MAAf,UACD,mDACC,cAAC,EAAD,CACAS,YAAc,iBACdC,cAAiB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAC3D,cAAC,EAAD,CAAU1B,QAAWoB,W,GAvBTO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cfd00fd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className = 'card-container'>\r\n    <img alt=\"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h1>\r\n    {props.monster.name}\r\n    </h1>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = props => (\r\n    \r\n   <div className = 'card-list'>\r\n   {props.monster.map(monster => (\r\n       <Card key = {monster.id} monster = {monster} />\r\n   ))}\r\n   </div>\r\n\r\n);","import React from 'react';\r\nimport '../search-box/search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handledChange}) => (\r\n\r\n    <input className = 'search' type = 'search' placeholder = {placeholder} onChange={handledChange}/>\r\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monster: [],\n      searchfield: ''\n  };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response => Response.json())\n    .then(users1 => this.setState({monster:users1}));\n  }\n  render() {\n    const {monster, searchfield } = this.state;\n    const filteredMonster = monster.filter(monster => monster.name.toLowerCase().includes(searchfield.toLowerCase()))\n    return (\n      <div className='App'>\n     <h1>Rolodex Mounstros</h1>\n      <SearchBox \n      placeholder = 'search monster'\n      handledChange = {e => this.setState({searchfield: e.target.value})}></SearchBox>\n      <CardList monster = {filteredMonster}/>\n      \n    </div>\n    );\n    }\n  }\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}